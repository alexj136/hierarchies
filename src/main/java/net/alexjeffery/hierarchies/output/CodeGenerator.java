package net.alexjeffery.hierarchies.output;

import net.alexjeffery.hierarchies.syntax.Declaration;
import net.alexjeffery.hierarchies.syntax.Field;
import net.alexjeffery.hierarchies.visitor.DeclarationVisitor;
import org.antlr.v4.runtime.misc.NotNull;

public class CodeGenerator {

    public String genDeclaration(@NotNull Declaration declaration) {
        return declaration.accept(GenDeclarationVisitor.INSTANCE, null);
    }

    private static class GenDeclarationVisitor extends DeclarationVisitor<Void, String, RuntimeException> {

        private GenDeclarationVisitor() { }

        public static final GenDeclarationVisitor INSTANCE = new GenDeclarationVisitor();

        @NotNull
        public String visit(@NotNull Declaration.Fixed fixed, Void input) throws RuntimeException {
            StringBuilder builder = new StringBuilder();
            // class header
            builder.append("/* Generated by Hierarchies. Edits will be lost. */\n");
            builder.append("public class " + fixed.name + " {\n    ");
            // field declarations
            for (Field field : fixed.fields) {
                builder.append(field.isOptional ? "@Nullable" : "@NotNull");
                builder.append("\n    private ");
                if (field.isList)
                    builder.append("List<");
                builder.append(field.type);
                if (field.isList)
                    builder.append(">");
                builder.append(" " + field.name);
                builder.append(";\n    ");
            }
            // constructor header
            builder.append("public " + fixed.name + "(");
            if (!fixed.fields.isEmpty()) {
                appendConstructorParameter(fixed.fields.get(0), builder);
                for (int i = 1; i < fixed.fields.size(); i++) {
                    builder.append(", ");
                    appendConstructorParameter(fixed.fields.get(i), builder);
                }
            }
            builder.append(") {\n        ");
            // constructor body
            if (!fixed.fields.isEmpty()) {
                appendConstructorAssignment(fixed.fields.get(0).name, builder);
                for (int i = 1; i < fixed.fields.size(); i++) {
                    builder.append("\n        ");
                    appendConstructorAssignment(fixed.fields.get(i).name, builder);
                }
            }
            builder.append("\n    }");
            // getters and setters TODO
            // end of class
            builder.append("\n}");
            return builder.toString();
        }

        private void appendConstructorAssignment(@NotNull String name, @NotNull StringBuilder builder) {
            builder.append("this." + name + " = " + name + ";");
        }

        private void appendConstructorParameter(@NotNull Field field, @NotNull StringBuilder builder) {
            if (!field.isOptional)
                builder.append("@NotNull ");
            else
                builder.append("@Nullable ");
            if (!field.isList)
                builder.append("List<");
            builder.append(field.type);
            if (!field.isList)
                builder.append(">");
            builder.append(" " + field.name);
        }

        @NotNull
        public String visit(@NotNull Declaration.Options options, Void input) throws RuntimeException {
            return "";
        }
    }


}
