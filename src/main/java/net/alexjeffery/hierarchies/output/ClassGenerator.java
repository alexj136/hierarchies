package net.alexjeffery.hierarchies.output;

import net.alexjeffery.hierarchies.syntax.Field;
import net.alexjeffery.hierarchies.util.ThrowingConsumer;
import org.antlr.v4.runtime.misc.NotNull;
import org.antlr.v4.runtime.misc.Nullable;

import java.io.IOException;
import java.util.List;

public class ClassGenerator {

    public static void generate(
            @NotNull Appendable buffer,
            @NotNull List<Field> fields,
            @NotNull String name
    ) throws IOException {
        ClassGenerator.generate(buffer, fields, name, null);
    }

    public static void generate(
            @NotNull Appendable buffer,
            @NotNull List<Field> fields,
            @NotNull String name,
            @Nullable String superName
    ) throws IOException {
        ClassGenerator generator = new ClassGenerator(buffer);
        generator.appendClass(fields, name, superName);
    }

    @NotNull
    private Appendable buffer;

    private ClassGenerator(@NotNull Appendable buffer) {
        this.buffer = buffer;
    }

    @NotNull
    private void appendClass(
            @NotNull List<Field> fields,
            @NotNull String name,
            @Nullable String superName
    ) throws IOException {
        buffer.append("/* Generated by Hierarchies. Edits will be lost. */\n");
        buffer.append("public class ").append(name);
        if (superName != null)
            buffer.append(" extends ").append(superName);
        buffer.append(" {\n    ");
        appendFieldsFormatted(this::appendFieldDeclaration, fields, "");
        buffer.append("public ").append(name).append("(");
        appendFieldsFormatted(this::appendConstructorParameter, fields, ", ");
        buffer.append(") {\n        ");
        appendFieldsFormatted(this::appendConstructorAssignment, fields, "\n        ");
        buffer.append("\n    }");
        appendFieldsFormatted(this::appendGetter, fields, "\n");
        appendFieldsFormatted(this::appendSetter, fields, "\n");
        if (superName != null)
            appendAcceptMethod(superName);
        buffer.append("\n}");
    }

    private void appendFieldDeclaration(@NotNull Field field) throws IOException {
        appendIsOptional(field);
        buffer.append("\n    private ");
        appendType(field);
        buffer.append(" ").append(field.name);
        buffer.append(";\n    ");
    }

    private void appendConstructorParameter(@NotNull Field field) throws IOException {
        appendIsOptional(field);
        buffer.append(" ");
        appendType(field);
        buffer.append(" ").append(field.name);
    }

    private void appendConstructorAssignment(@NotNull Field field) throws IOException {
        String name = field.name;
        buffer.append("this.");
        buffer.append(name);
        buffer.append(" = ");
        buffer.append(name);
        buffer.append(";");
    }

    private void appendGetter(@NotNull Field field) throws IOException {
        appendIsOptional(field);
        buffer.append("\n    public ");
        appendType(field);
        buffer.append(" get");
        appendFieldNameCapitalised(field);
        buffer.append("() {\n        return this.");
        buffer.append(field.name);
        buffer.append(";\n    }");
    }

    private void appendSetter(@NotNull Field field) throws IOException {
        buffer.append("\n    public void set");
        appendFieldNameCapitalised(field);
        buffer.append("(");
        appendIsOptional(field);
        buffer.append(" ");
        appendType(field);
        buffer.append(" ");
        buffer.append(field.name);
        buffer.append(") {\n        this.");
        buffer.append(field.name);
        buffer.append(" = ");
        buffer.append(field.name);
        buffer.append(";\n    }");
    }


    private void appendAcceptMethod(@NotNull String superName) throws IOException {
        buffer.append("    @Override\n")
                .append("    public <I, O, X extends Throwable> O accept(@NotNull ")
                .append(superName)
                .append("Visitor<I, O, X> visitor, I input) throws X {\n")
                .append("        return visitor.visit(this, input);\n")
                .append("    }");
    }

    private void appendFieldsFormatted(
            @NotNull ThrowingConsumer<Field, IOException> action,
            @NotNull List<Field> fields,
            @NotNull String intersperseText)
            throws IOException {
        ThrowingConsumer.consumeListWithIntermediateAction(action, fields, __ -> { buffer.append(intersperseText); });
    }

    private void appendIsOptional(@NotNull Field field) throws IOException {
        buffer.append(field.isOptional ? "@Nullable" : "@NotNull");
    }

    private void appendType(@NotNull Field field) throws IOException {
        boolean isList = field.isList;
        buffer.append(isList ? "List<" : "");
        buffer.append(field.type);
        buffer.append(isList ? ">" : "");
    }

    private void appendFieldNameCapitalised(@NotNull Field field) throws IOException {
        buffer.append(Character.toUpperCase(field.name.charAt(0)));
        buffer.append(field.name.substring(1));
    }
}
