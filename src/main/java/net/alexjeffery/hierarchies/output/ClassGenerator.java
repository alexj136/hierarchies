package net.alexjeffery.hierarchies.output;

import net.alexjeffery.hierarchies.syntax.Field;
import org.antlr.v4.runtime.misc.NotNull;

import java.util.List;
import java.util.function.Consumer;

public class ClassGenerator {

    public static String generate(@NotNull List<Field> fields, @NotNull String name) {
        StringBuilder builder = new StringBuilder();
        ClassGenerator generator = new ClassGenerator(builder);
        generator.appendClass(fields, name);
        return builder.toString();
    }

    @NotNull
    private StringBuilder builder;

    private ClassGenerator(@NotNull StringBuilder builder) {
        this.builder = builder;
    }

    @NotNull
    private void appendClass(@NotNull List<Field> fields, @NotNull String name) {
        builder.append("/* Generated by Hierarchies. Edits will be lost. */\n");
        builder.append("public class ").append(name).append(" {\n    ");
        appendFieldsFormatted(this::appendFieldDeclaration, fields, "");
        builder.append("public ").append(name).append("(");
        appendFieldsFormatted(this::appendConstructorParameter, fields, ", ");
        builder.append(") {\n        ");
        appendFieldsFormatted(this::appendConstructorAssignment, fields, "\n        ");
        builder.append("\n    }");
        appendFieldsFormatted(this::appendGetter, fields, "\n");
        appendFieldsFormatted(this::appendSetter, fields, "\n");
        builder.append("\n}");
    }

    private void appendFieldDeclaration(@NotNull Field field) {
        appendIsOptional(field);
        builder.append("\n    private ");
        appendType(field);
        builder.append(" ").append(field.name);
        builder.append(";\n    ");
    }

    private void appendConstructorParameter(@NotNull Field field) {
        appendIsOptional(field);
        builder.append(" ");
        appendType(field);
        builder.append(" ").append(field.name);
    }

    private void appendConstructorAssignment(@NotNull Field field) {
        String name = field.name;
        builder.append("this.");
        builder.append(name);
        builder.append(" = ");
        builder.append(name);
        builder.append(";");
    }

    private void appendGetter(@NotNull Field field) {
        appendIsOptional(field);
        builder.append("\n    public ");
        appendType(field);
        builder.append(" get");
        appendNameCapitalised(field);
        builder.append("() {\n        return this.");
        builder.append(field.name);
        builder.append(";\n    }");
    }

    private void appendSetter(@NotNull Field field) {
        builder.append("\n    public void set");
        appendNameCapitalised(field);
        builder.append("(");
        appendIsOptional(field);
        builder.append(" ");
        appendType(field);
        builder.append(" ");
        builder.append(field.name);
        builder.append(") {\n        this.");
        builder.append(field.name);
        builder.append(" = ");
        builder.append(field.name);
        builder.append(";\n    }");
    }

    private void appendFieldsFormatted(
            @NotNull Consumer<Field> action,
            @NotNull List<Field> fields,
            @NotNull String intersperseText) {
        if (fields.isEmpty())
            return;
        appendFieldFormatted(action, fields.get(0));
        for (int i = 1; i < fields.size(); i++) {
            builder.append(intersperseText);
            appendFieldFormatted(action, fields.get(i));
        }
    }

    private void appendFieldFormatted(
            @NotNull Consumer<Field> action,
            @NotNull Field field) {
        action.accept(field);
    }

    private void appendIsOptional(@NotNull Field field) {
        builder.append(field.isOptional ? "@Nullable" : "@NotNull");
    }

    private void appendType(@NotNull Field field) {
        boolean isList = field.isList;
        builder.append(isList ? "List<" : "");
        builder.append(field.type);
        builder.append(isList ? ">" : "");
    }

    private void appendNameCapitalised(@NotNull Field field) {
        builder.append(Character.toUpperCase(field.name.charAt(0)));
        builder.append(field.name.substring(1));
    }
}
